name: auto sync

on:
  schedule:
    - cron: "0 18 * * *"
  workflow_dispatch:

env:
  GITHUB_TOKEN: ${{ github.token }}
  APP_ID: 229710
  APP_PRIVATE_KEY: ${{ secrets.APP_PRIVATE_KEY }}

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:

      - uses: actions/checkout@v2
        with:
          repository: deepin-community/.github
          path: deepin-community.github

      - name: init python environment
        run: |
          sudo apt install python3-requests

      # Install ssh key and known_hosts
      - name: Git config
        env:
          SSH_KEY: ${{secrets.SYNC_SSH_KEY}}
          KNOWN_HOSTS: ${{secrets.SYNC_SSH_KNOWN_HOSTS}}
        run: |
          git config --global user.name deepin-community-bot
          git config --global user.email deepin-community-bot@blumia.net

      - name: sync workflow to all public repo
        id: get-changed
        run: |
          cd $GITHUB_WORKSPACE/deepin-community.github

          python3 repos/deepin-community/update.py call-chatOps.yml call-build-deb.yml call-clacheck.yml backup-to-gitlab.yml call-build-tag.yml

          git add . && git commit -m "chore: sync workflow to all public repo" && git push || echo "::set-output name=CHANGED::$(echo NO)"

      - name: install depends for load scripts
        run: |
          npm install @octokit/rest
          npm install @octokit/auth-app

      - name: Get token using github-script
        if: ${{ steps.get-changed.outputs.CHANGED != NO }}
        id: get-token
        uses: actions/github-script@v6
        with:
          script: |
            const { Octokit } = require("@octokit/rest");
            const { createAppAuth } = require("@octokit/auth-app");
            const appOctokit = new Octokit({
              authStrategy: createAppAuth,
              auth: {
                appId: process.env.APP_ID,
                privateKey: process.env.APP_PRIVATE_KEY,
              }
            });
            const app_installation = await appOctokit.rest.apps.getRepoInstallation({
              owner: context.payload.organization.login,
              repo: context.payload.repository.name
            });
            const { token } = await appOctokit.auth({
              type: "installation",
              installationId: app_installation.data.id
            });
            core.setOutput('app_token', token)

      - name: Repository Dispatch
        if: ${{ steps.get-changed.outputs.CHANGED != NO }}
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ steps.get-token.outputs.app_token }}
          event-type: sync
